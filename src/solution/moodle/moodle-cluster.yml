---
AWSTemplateFormatVersion: '2010-09-09'
Description: Moodle Cluster
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
    - t3.medium
    - t3.large
    - t3.xlarge
    - t3.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  CertificateArn:
    Type: String
    Default: ""
    Description: "ACM Certificate Arn, eg: arn:aws:acm:${AWS::REGION}:${AWS::ACCOUNT}:certificate/9e50ea95-8325-41bf-b318-8ec0fbcc70bb"
  HostName:
    Description: Host Name, leave empty to have one generated
    Type: String
    Default: ''
    AllowedPattern: "([a-z][a-z0-9\\-\\.]*)?"
    MinLength: '0'
    MaxLength: '64'
    ConstraintDescription: 'must be a valid host name, eg: moodle.example.com, or
      leave empty to use EC2 hostname'
  HostedZoneName:
    Description: Required to register HostName automatically, otherwise must configure
      DNS in your current provider
    Type: AWS::Route53::HostedZone::Id
  CorporateCidrIp:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  AsgDesiredSize:
    Type: Number
    Description: Desired capacity of Auto Scaling Group
    Default: '2'
  AsgMaxSize:
    Type: Number
    Description: Maximum capacity of Auto Scaling Group
    Default: '4'
  DBName:
    Default: moodledb
    Description: The Moodle database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBMasterPassword:
    NoEcho: 'true'
    Description: MySQL master password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.
  DBAllocatedStorage:
    Description: GB
    Default: '10'
    Type: Number
    MinValue: '5'
    MaxValue: '200'
    ConstraintDescription: must contain only integer.
  DBInstanceClass:
    Description: RDS instance class
    Type: String
    Default: db.t3.small
    AllowedValues:
    - db.t3.small
    - db.t3.medium
    - db.t3.large
    ConstraintDescription: must be a valid RDS instance class.
  DBMultiAZ:
    Type: String
    Description: Deploy in multiple Availability Zones
    AllowedValues:
    - 'yes'
    - 'no'
    Default: 'no'
  MoodleVersion:
    Description: Moodle version number or latest development
    Type: String
    Default: 3.9.1
    AllowedValues:
    - 3.9.1
    - development
  MoodleAdminPassword:
    NoEcho: 'true'
    Description: Moodle Admin Password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.
  MoodleAdminEmail:
    Description: Moodle Admin Email
    Type: String
    MinLength: '1'
    MaxLength: '200'
    AllowedPattern: "[a-zA-Z0-9@\\.]*"
    ConstraintDescription: must contain only alphanumeric characters.
  MoodleSiteFullName:
    Description: Moodle Site Full Name
    Type: String
    MinLength: '1'
    MaxLength: '200'
    AllowedPattern: "[a-zA-Z0-9 \\-]*"
    ConstraintDescription: must contain only alphanumeric characters.
  MoodleSiteShortName:
    Description: Moodle Site Short Name
    Type: String
    MinLength: '3'
    MaxLength: '20'
    AllowedPattern: "[a-zA-Z0-9 \\-]*"
    ConstraintDescription: must contain only alphanumeric characters.
  MoodleUUID:
    NoEcho: 'true'
    Description: UUID used for several purposes in cloudformation
    Default: 8824dc9d-b814-4add-b239-454aeef0a4e4
    Type: String
    MinLength: '36'
    MaxLength: '36'
    AllowedPattern: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}"
    ConstraintDescription: must contain a valid UUID
  CacheNodeType:
    Description: Cache Node Type
    Type: String
    Default: cache.t3.micro
    AllowedValues:
    - cache.t3.micro
    - cache.t3.small
    - cache.t3.medium
    ConstraintDescription: must be a valid Cache node type.
  CacheMultiAZ:
    Type: String
    Description: Deploy in multiple Availability Zones
    AllowedValues:
    - 'yes'
    - 'no'
    Default: 'no'
  CacheNumNodes:
    Type: Number
    Description: Cache cluster size
    Default: '1'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Moodle Configuration
      Parameters:
      - MoodleSiteFullName
      - MoodleSiteShortName
      - MoodleAdminEmail
      - MoodleAdminPassword
      - MoodleVersion
      - MoodleUUID
    - Label:
        default: Network Configuration
      Parameters:
      - HostedZoneName
      - HostName
      - CertificateArn
      - CorporateCidrIp
    - Label:
        default: Web Server Configuration
      Parameters:
      - InstanceType
      - KeyName
      - AsgDesiredSize
      - AsgMaxSize
    - Label:
        default: Cache Configuration
      Parameters:
      - CacheNodeType
      - CacheNumNodes
      - CacheMultiAZ
    - Label:
        default: Database Configuration
      Parameters:
      - DBInstanceClass
      - DBName
      - DBMasterPassword
      - DBAllocatedStorage
      - DBMultiAZ
    ParameterLabels:
      MoodleUUID:
        default: Moodle UUID
      MoodleVersion:
        default: Moodle Version
      MoodleAdminEmail:
        default: Admin Email
      MoodleAdminPassword:
        default: Admin Password
      MoodleSiteFullName:
        default: Site Full Name
      MoodleSiteShortName:
        default: Site Short Name
      HostName:
        default: Host Name
      CertificateArn:
        default: Amazon Certificate Manager Arn
      HostedZoneName:
        default: Hosted Zone Name
      CorporateCidrIp:
        default: Admin IP Address
      InstanceType:
        default: Instance Type
      KeyName:
        default: SSH Key Name
      AsgMaxSize:
        default: Maximum Node Count
      DBInstanceClass:
        default: Instance Type
      DBName:
        default: Name
      DBMasterPassword:
        default: Password
      DBAllocatedStorage:
        default: Capacity
      DBMultiAZ:
        default: High Availability
      CacheNodeType:
        default: Instance Type
      CacheNumNodes:
        default: Quantity
      CacheMultiAZ:
        default: High Availability

Mappings:
  AWSInstanceType2Arch:
    t3.medium:
      Arch: HVM64
    t3.large:
      Arch: HVM64
    t3.xlarge:
      Arch: HVM64
    t3.2xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-09d8b5222f2b93bf0
    us-east-2:
      HVM64: ami-02b0c55eeae6d5096
    us-west-2:
      HVM64: ami-f303fb93
    us-west-1:
      HVM64: ami-11790371
    eu-west-1:
      HVM64: ami-c39604b0
    eu-central-1:
      HVM64: ami-7df01e12
    ap-northeast-1:
      HVM64: ami-6154bb00
    ap-northeast-2:
      HVM64: ami-69e92207
    ap-southeast-1:
      HVM64: ami-a2c111c1
    ap-southeast-2:
      HVM64: ami-d9d7f9ba
    sa-east-1:
      HVM64: ami-069ea08777c5f00b5
    cn-north-1:
      HVM64: ami-05a66c68
  MoodleDownload:
    3.9.1:
      URL: https://download.moodle.org/download.php/direct/stable39/moodle-3.9.1.tgz
    development:
      URL: https://download.moodle.org/download.php/direct/moodle/moodle-latest.zip
  CacheMultiAZMap:
    'yes':
      AZMode: cross-az
    'no':
      AZMode: single-az

Conditions:
  UseHostName:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: HostName
  HasHostedZoneName:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: HostedZoneName
  DNSRegistration:
    Fn::And:
    - Condition: UseHostName
    - Condition: HasHostedZoneName
  Is-DBMultiAZ:
    Fn::Equals:
    - Ref: DBMultiAZ
    - 'yes'

Resources:

  #
  # VPC
  #
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.32.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId: !Ref InternetGateway

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.32.0.0/20
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 172.32.16.0/20
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs: ''
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName

  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.32.32.0/20
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs: ''
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName

  Route1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet3
      RouteTableId: !Ref RouteTable

  # 
  # Security
  # 
  BastionSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Bastion access from Corporate Network
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref CorporateCidrIp
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Bastion

  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable HTTP from internet
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-LB

  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable HTTP access via port 80 locked down to the load balancer
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        SourceSecurityGroupId: !GetAtt LoadBalancerSG.GroupId
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref CorporateCidrIp
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-WebServer

  NetworkFilesystemSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
    - WebServerSG
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        SourceSecurityGroupId: !GetAtt WebServerSG.GroupId
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-NetworkFilesystem

  CacheSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Elasticache Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '6379'
        ToPort: '6379'
        SourceSecurityGroupId: !GetAtt WebServerSG.GroupId
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Cache

  DatabaseSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
    - WebServerSG
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access from WebServer
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupId: !GetAtt WebServerSG.GroupId
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-DB

  # 
  # Network Filesystem
  # 
  FileSystem:
      Type: AWS::EFS::FileSystem
      Properties:
        PerformanceMode: generalPurpose
        ThroughputMode: bursting #bursting ou provisioned
        ProvisionedThroughputInMibps: !Ref AWS::NoValue #somente para provisioned 1-1024
        FileSystemTags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MoodleData

  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref Subnet1
      SecurityGroups:
      - Ref: NetworkFilesystemSG

  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref Subnet2
      SecurityGroups:
      - Ref: NetworkFilesystemSG

  MountTarget3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref Subnet3
      SecurityGroups:
      - Ref: NetworkFilesystemSG

  # 
  # Cache
  # 
  CacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Cache Subnet Group
      SubnetIds:
      - Ref: Subnet1
      - Ref: Subnet2
      - Ref: Subnet3

  CacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      AutoMinorVersionUpgrade: 'true'
      Engine: redis
      CacheNodeType: !Ref CacheNodeType
      NumCacheNodes: !Ref CacheNumNodes
      AZMode: !FindInMap
        - CacheMultiAZMap
        - Ref: CacheMultiAZ
        - AZMode
      CacheSubnetGroupName: !Ref CacheSubnetGroup
      VpcSecurityGroupIds: 
        - !GetAtt CacheSG.GroupId
      # NotificationTopicArn: !Ref NotificationTopic
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-MoodleCache

  # 
  # Database
  #         
  Database:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot      
    Properties:
      DBName: !Ref DBName
      AllocatedStorage: !Ref DBAllocatedStorage
      StorageType: gp2
      DBInstanceClass: !Ref DBInstanceClass
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      DBParameterGroupName: !Ref DatabaseParameterGroup
      Engine: MySQL
      EngineVersion: '5.7'
      MasterUsername: master
      MultiAZ: !If [ Is-DBMultiAZ, true, false ]
      CopyTagsToSnapshot: true
      MasterUserPassword: !Ref DBMasterPassword
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-MoodleDB
      VPCSecurityGroups: 
        - !GetAtt DatabaseSG.GroupId

  DatabaseParameterGroup: 
    Type: AWS::RDS::DBParameterGroup
    Properties: 
      Description: Moodle Parameter Grpoup
      Family: mysql5.7
      Parameters: 
        time_zone: "UTC"
        skip-character-set-client-handshake: 1
        character_set_server: "utf8mb4"
        character_set_results: "utf8mb4"
        character_set_database: "utf8mb4"
        character_set_connection: "utf8mb4"
        character_set_client: "utf8mb4" 
        character-set-client-handshake: 0
        collation_connection: utf8mb4_unicode_ci
        collation_server: utf8mb4_unicode_ci

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub ${AWS::StackName}-DatabaseSubnetGroup
      SubnetIds:
      - Ref: Subnet1
      - Ref: Subnet2
      - Ref: Subnet3

  #
  # Web Server
  #
  WebRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  WebRoleCloudWatchPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: cloudwatch
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - cloudwatch:PutMetricData
          Resource:
          - "*"
      Roles:
      - Ref: WebRole

  WebRoleCloudFormationPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: cloudformation
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - cloudformation:DescribeStackResource
          - cloudformation:SignalResource
          Resource:
          - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*
      Roles:
      - Ref: WebRole
      
  WebProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: WebRole

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          moodle_install:
          - setup
          - install_moodle
          - configure_moodle
        setup:
          packages:
            yum:
              nfs-utils: []
              nginx: []
          commands:
            01_createdir:
              command: mkdir -p /var/www/data
            02_fstab:
              command: !Sub | 
                echo "${FileSystem}.efs.${AWS::Region}.amazonaws.com:/ /var/www/data nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" >> /etc/fstab
            03_mount:
              command: mount /var/www/data
            04_chmoddir:
              command: chmod 0777 /var/www/data
          services:
            sysvinit:
              crond:
                enabled: 'true'
                ensureRunning: 'true'
        install_moodle:
          packages:
            yum:
              mysql: []
              php72: []
              php72-fpm: []
              php72-cli: []
              php72-gd: []
              php72-intl: []
              php72-mbstring: []
              php72-opcache: []
              php72-soap: []
              php72-xml: []
              php72-xmlrpc: []
              php72-process: []
              php72-json: []
              php72-pecl-redis: []
              php72-mysqlnd: []
          sources:
            "/var/www": !FindInMap [ MoodleDownload, !Ref MoodleVersion, URL]
          files:
            "/etc/nginx/nginx.conf":
              content: !Sub |
                user nginx;
                worker_processes auto;
                error_log /var/log/nginx/error.log;
                pid /var/run/nginx.pid;
                events {
                  worker_connections 1024;
                }
                http {
                  log_format compression '$remote_addr - $remote_user [$time_local] '
                                         '"$request" $status $body_bytes_sent '
                                         '"$http_referer" "$http_user_agent" "$gzip_ratio"';
                  sendfile            on;
                  tcp_nopush          on;
                  tcp_nodelay         on;
                  keepalive_timeout   65;
                  types_hash_max_size 2048;
                  include             /etc/nginx/mime.types;
                  default_type        application/octet-stream;
                  include /etc/nginx/conf.d/*.conf;
                  index   index.php;
                  server {
                    access_log  /var/log/nginx/access.log compression;
                    gzip on;
                    listen       80 default_server;
                    listen       [::]:80 default_server;
                    server_name  localhost;
                    root         /var/www/html;
                    location / {
                    }
                    location ~ [^/]\\.php(/|$) {
                      fastcgi_split_path_info  ^(.+\.php)(.*)$;
                      fastcgi_index            index.php;
                      fastcgi_pass             unix:/var/run/php-fpm/www.sock;
                      include                  /etc/nginx/mime.types;
                      include                  fastcgi_params;
                      fastcgi_param   PATH_INFO       $fastcgi_path_info;
                      fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;
                    }
                    location /dataroot/ {
                      internal;
                      alias /var/www/data/;
                    }
                  }
                }
              mode: '000644'
              owner: root
              group: root

            "/etc/php-fpm.d/redis.ini":
              content: !Sub |
                extension = redis.so

            
            "/tmp/mysql-alterdatabase.sql":
              content: !Sub |
                ALTER DATABASE moodledb  CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
              mode: '000500'
              owner: root
              group: root

            "/tmp/update-php-ini.sh":
              content: !Sub |
                #!/bin/bash
                # upload_max_filesize=32
                # post_max_size=32M
                # for key in upload_max_filesize post_max_size
                # do
                #   sed -i "s/^\($key\).*/\1 $(eval echo $key)/" /etc/php.ini
                # done
              mode: '000500'
              owner: root
              group: root

            "/tmp/config.php":
              content: !Sub |
                <?php
                unset($CFG);
                global $CFG;
                $CFG = new stdClass();
                $CFG->dbtype = 'mysqli';
                $CFG->dblibrary = 'native';
                $CFG->dbhost    = '${Database.Endpoint.Address}';
                $CFG->dbname    = '${DBName}';
                $CFG->dbuser    = 'master';
                $CFG->dbpass    = '${DBMasterPassword}';
                $CFG->prefix    = '';
                $CFG->dboptions = array('dbpersist' => false, 'dbsocket' => false,'dbport' => '', 'dbhandlesoptions' => false,  'dbcollation' => 'utf8mb4_unicode_ci');
                $CFG->wwwroot   = 'https://${HostName}';
                $CFG->reverseproxy = true;
                $CFG->sslproxy = true;
                $CFG->dataroot  = '/var/www/data';
                $CFG->localcachedir = '/var/www/local';
                $CFG->tempdir = '/var/www/temp';        // Directory MUST BE SHARED by all cluster nodes.
                $CFG->cachedir = '/var/www/cache';      // Directory MUST BE SHARED by all cluster nodes.
                $CFG->directorypermissions = 02777;
                $CFG->preventfilelocking = true;
                $CFG->admin = 'admin';
                $CFG->xsendfile = 'X-Accel-Redirect';
                $CFG->xsendfilealiases = array('/dataroot/' => $CFG->dataroot);
                $CFG->cronclionly=false;
                $CFG->cronremotepassword = '${MoodleUUID}';
                $CFG->session_handler_class = '\\core\\session\\redis';
                $CFG->session_redis_host = '${CacheCluster.RedisEndpoint.Address}';
                $CFG->session_redis_port = 6379;  // Optional.;
                $CFG->session_redis_database = 0;  // Optional, default is db 0.;
                $CFG->session_redis_prefix = 'session'; // Optional, default is don't set one.;
                $CFG->session_redis_acquire_lock_timeout = 120;
                $CFG->session_redis_lock_expire = 7200;
                $CFG->cachestore_redis = '${CacheCluster.RedisEndpoint.Address}:6379';
                require_once(__DIR__ . '/lib/setup.php');
              mode: '000500'
              owner: root
              group: root

          services:
            sysvinit:
              nginx:
                enabled: 'true'
                ensureRunning: 'true'
              php-fpm:
                enabled: 'true'
                ensureRunning: 'true'
              crond:
                enabled: 'true'
                ensureRunning: 'true'
          commands:
            01_update_php_ini:
              command: "/tmp/update-php-ini.sh"

        configure_moodle:
          commands:
            01_configure_moodle:
              command: !Sub |
                mv -fT /var/www/moodle /var/www/html;
                mv /tmp/config.php /var/www/html;
                chown -R root /var/www/html;
                chmod -R 0755 /var/www/html;

            02_create_local_dir:
              command: !Sub |
                mkdir /var/www/local
                mkdir /var/www/cache
                mkdir /var/www/temp
                chmod 0777 /var/www/local /var/www/cache /var/www/temp

            03_config_mysql:
              command: !Sub |
                mysql -umaster -p${DBMasterPassword} -h${Database.Endpoint.Address} ${DBName} < /tmp/mysql-alterdatabase.sql

            04_install_database:
              cwd: "/var/www/html/admin/cli"
              command: !Sub |
                if [ -f /var/www/data/.dbinstalled ]; 
                then
                  php upgrade.php --non-interactive --allow-unstable;
                else 
                  touch /var/www/data/.dbinstalled;
                  php install_database.php --lang=pt_BR \
                    --adminpass="${MoodleAdminPassword}" \
                    --adminemail="${MoodleAdminEmail}" \
                    --fullname="${MoodleSiteFullName}" \
                    --shortname="${MoodleSiteShortName}" \
                    --agree-license;
                fi
    Properties:
      AssociatePublicIpAddress: true
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - Ref: InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
      - !Ref WebServerSG
      IamInstanceProfile: !Ref WebProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --stack=${AWS::StackName} --resource=LaunchConfiguration --configsets=moodle_install --region=${AWS::Region} --role=${WebRole}
          /opt/aws/bin/cfn-signal -e $? --stack=${AWS::StackName} --resource=AutoScalingGroup --region=${AWS::Region} --role=${WebRole}

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - MountTarget1
    - MountTarget2
    - MountTarget3
    - InternetGateway
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: 'true'
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MinSuccessfulInstancesPercent: 100
        WaitOnResourceSignals: true
    Properties:
      VPCZoneIdentifier:
      - Ref: Subnet1
      - Ref: Subnet2
      - Ref: Subnet3
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: '1'
      MaxSize: !Ref AsgMaxSize
      DesiredCapacity: !Ref AsgDesiredSize
      TargetGroupARNs: 
        - Ref: LoadBalancerTG
      MetricsCollection:
      - Granularity: 1Minute
        Metrics:
        - GroupInServiceInstances
        - GroupTotalInstances
      # NotificationConfigurations:
      # - NotificationTypes:
      #   - autoscaling:EC2_INSTANCE_LAUNCH
      #   - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
      #   - autoscaling:EC2_INSTANCE_TERMINATE
      #   - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      #   TopicARN:
      #     Ref: NotificationTopic
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-WebServer
        PropagateAtLaunch: 'true'

  AutoScalingUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: '120'
      ScalingAdjustment: '1'

  WebServerAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      Statistic: Average
      AlarmDescription: !Sub ${AWS::StackName}-WebServer High CPU Alarm
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: '50'
      AlarmActions:
      # - Ref: NotificationTopic
      - Ref: AutoScalingUpPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes: []
      Name: !Sub ${AWS::StackName}-LoadBalancer
      Scheme: internet-facing
      SecurityGroups:
      - Ref: LoadBalancerSG
      Subnets:
      - Ref: Subnet1
      - Ref: Subnet2
      - Ref: Subnet3

  LoadBalancerTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 3
      Matcher:
        HttpCode: '303,200'
      Name: !Sub ${AWS::StackName}-TG
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: 'true'
      - Key: stickiness.type
        Value: lb_cookie
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  AlbListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: LoadBalancerTG        
        # - Type: redirect
        #   RedirectConfig:
        #     Protocol: HTTPS
        #     Port: 443
        #     StatusCode: HTTP_301
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP

  AlbListener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: LoadBalancerTG
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: DNSRegistration
    Properties:
      HostedZoneId: !If [ DNSRegistration, !Ref HostedZoneName, !Ref "AWS::NoValue" ]
      Comment: Moodle DNS
      Name: !Ref HostName
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt LoadBalancer.DNSName

  #
  # Monitoramento
  #

  CronRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-CronRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: cloudwatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
            
  Cron:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub ${AWS::StackName}-Cron
      Handler: index.handler
      Role: !GetAtt CronRole.Arn
      Code:
        ZipFile: !Sub |
          var http = require('http');
          exports.handler = function (event, context) {
            http.get(process.env.CRON_URL, function (result) {
              console.log('Success, with: ' + result.statusCode);
              context.done(null);
            }).on('error', function (err) {
              console.log('Error, with: ' + err.message);
              context.done("Failed");
            });
          };
      Runtime: nodejs12.x
      Timeout: '300'
      Environment:
        Variables:
          CRON_URL: !Sub https://${HostName}/admin/cron.php?password=${MoodleUUID}

  CronPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Cron
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CronRule.Arn

  CronRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub ${AWS::StackName}-CronRule
      ScheduleExpression: rate(1 minute)
      Targets:
        - Arn: !GetAtt Cron.Arn
          Id: Cron

  # DatabaseEventSubscription:
  #   Type: AWS::RDS::EventSubscription
  #   Properties:
  #     SnsTopicArn:
  #       Ref: NotificationTopic
  #     SourceIds:
  #     - Ref: Database
  #     SourceType: db-instance
      
  # DatabaseHighCPUAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmDescription: !Sub ${AWS::StackName}-MoodleDB High CPU Alarm
  #     AlarmActions: !Ref NotificationTopic
  #     MetricName: CPUUtilization
  #     Namespace: AWS/RDS
  #     Statistic: Average
  #     Period: '60'
  #     EvaluationPeriods: '2'
  #     Threshold: '70'
  #     ComparisonOperator: GreaterThanThreshold
  #     Dimensions:
  #     - Name: InstanceId
  #       Value: !Ref Database

  
  #    NotificationTopic:
  #      Type: AWS::SNS::Topic
  #      Properties:
  #        DisplayName:
  #          Fn::Join:
  #          - "-"
  #          - - Ref: AWS::StackName
  #            - Notification
  #    MySubscription:
  #      Type: AWS::SNS::Subscription
  #      Properties:
  #        Endpoint:
  #          Ref: MoodleAdminEmail
  #        Protocol: email
  #        TopicArn:
  #          Ref: NotificationTopic
  #  Outputs:
  #    WebsiteURL:
  #      Value:
  #        Fn::Join:
  #        - ''
  #        - - http://
  #          - Fn::If:
  #            - UseHostName
  #            - Ref: HostName
  #            - Fn::GetAtt:
  #              - LoadBalancer
  #              - DNSName
  #          - "/"
  #      Description: Moodle Website
  #    ElastiCache:
  #      Value:
  #        Fn::GetAtt:
  #        - CacheCluster
  #        - RedisEndpoint.Address
  #      Description: ElastiCache URI
  #    LoadBalancer:
  #      Value:
  #        Fn::Join:
  #        - ''
  #        - - http://
  #          - Fn::GetAtt:
  #            - LoadBalancer
  #            - DNSName
  #          - "/"
  #      Description: Load Balancer URL
   